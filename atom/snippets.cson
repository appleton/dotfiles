# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
'.source.js, .source.ts, .source.tsx':
  'Console log':
    'prefix': 'cl'
    'body': 'console.log($1);'
  'then':
    'prefix': 'then'
    'body': 'then(() => {\n  ${0}\n});'
  'require':
    'prefix': 'req'
    'body': '${1:var} ${2} = require(\'${3:path}\');${0}'
  'module-import':
    'prefix': 'im'
    'body': 'import ${1} from ${2};'
  'module-export':
    'prefix': 'ex'
    'body': 'export ${0};'
  'module-export-default':
    'prefix': 'ed'
    'body': 'export default ${0};'
  'mocha-context':
    'prefix': 'con'
    'body': 'context(\'${1}\', () => {\n  ${0}\n});'
  'jasmine-waitsFor':
    'prefix': 'wai'
    'body': 'waitsFor(function() {\n  ${0}\n});'
  'jasmine-set':
    'prefix': 'set'
    'body': 'set(\'${1}\', () => ${0});'
  'jasmine-runs':
    'prefix': 'run'
    'body': 'runs(function() {\n  ${0}\n});'
  'jasmine-it':
    'prefix': 'it'
    'body': 'it(\'${1}\', () => {\n  ${0}\n});'
  'jasmine-describe':
    'prefix': 'des'
    'body': 'describe(\'${1}\', () => {\n  ${0}\n});'
  'jasmine-before':
    'prefix': 'bef'
    'body': 'beforeEach(() => {\n  ${0}\n});'
  'jasmine-after':
    'prefix': 'aft'
    'body': 'afterEach(() => {\n  ${0}\n});'
  'finally':
    'prefix': 'finally'
    'body': 'finally(() => {\n  ${0}\n});'
  'ember-setter':
    'prefix': 'ts'
    'body': 'this.set(\'${1}\', ${2});'
  'ember-getter':
    'prefix': 'tg'
    'body': 'this.get(\'${0}\');'
  'catch':
    'prefix': 'catch'
    'body': 'catch(() => {\n  ${0}\n});'
  'amd-define':
    'prefix': 'def'
    'body': 'define(function(require) {\n  ${0}\n});'
'.source.ruby':
  'rspec-subject':
    'prefix': 'subj'
    'body': 'subject { ${0} }'
  'rspec-let':
    'prefix': 'let'
    'body': 'let(${1}) { ${0} }'
  'rspec-it':
    'prefix': 'it'
    'body': 'it "${1}" do\n  ${0}\nend'
  'rspec-describe':
    'prefix': 'des'
    'body': 'describe "${1}" do\n  ${0}\nend'
  'rspec-context':
    'prefix': 'con'
    'body': 'context "${1}" do\n  ${0}\nend'
  'rspec-before':
    'prefix': 'bef'
    'body': 'before { ${0} }'
  'rspec-after':
    'prefix': 'aft'
    'body': 'after { ${0} }'
'.source.go':
  'Test':
    'prefix': 'test'
    'body': 'func Test${1} (t *testing.T) {\n	${0}\n}'
